@model DCC_Planned_Derived_Ventures.Models.Itinerary
@{
    ViewBag.Title = "SubCategoryPlaces";
}
<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 100%;
    }

    #right-panel {
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
    }

        #right-panel select, #right-panel input {
            font-size: 15px;
        }

        #right-panel select {
            width: 100%;
        }

        #right-panel i {
            font-size: 12px;
        }

    #right-panel {
        font-family: Arial, Helvetica, sans-serif;
        width: 100%;
        padding: 5px;
        z-index: 5;
        border: 1px solid #999;
        background: #fff;
    }

    #right-panel h2 {
        font-size: 22px;
        margin: 0 0 5px 0;
    }

    #right-panel ul {
        list-style-type: none;
        padding: 0;
        margin: 0; 
        overflow-y: hidden;
    }

    #places li {
        background-color: #f1f1f1;
        padding: 10px;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
    }

        #places li:nth-child(odd) {
            background-color: #fcfcfc;
        }

    #more {
        width: 100%;
        margin: 5px 0 0 0;
    }
</style>

<h1>Sub-Category Places</h1>
<br />

<h4 class="text-capitalize"> @ViewBag.ChoosenSubCat </h4>

<div class="row col-md-12">
    <div id="map" style="width: 35rem; height: 19.95rem;"></div>
</div>
<div class="row col-md-12">
    <div id="right-panel" class="my-3 ">
        <h2>Results</h2>
        <div id="places" class="row"></div>
        <button id="more">More results</button>
    </div>
</div>


<br />
<a href="@Url.Action("Details", new { id = Model.ID })" class="btn btn-outline-primary my-2"> <i class="fas fa-chevron-circle-left"></i> &nbsp; Back To Itinerary &nbsp; </a>

<script>

    var map;


    function initMap() {
        // Create the map.
        var data;
        $.ajax({
            async: false, //thats the trick
            url: 'http://maps.google.com/maps/api/geocode/json?address= @ViewBag.DestinationAddress.AddressLine , @ViewBag.DestinationAddress.City.name , @ViewBag.DestinationAddress.State.name  @ViewBag.DestinationAddress.ZipCode.ZipCode  ',
            dataType: 'json',
            success: function (response) {
                data = response;
            }
        });
        var _lat = data.results[0].geometry.location.lat;
        var _lng = data.results[0].geometry.location.lng;

         var currentDest = { lat: _lat, lng: _lng };
        map = new google.maps.Map(document.getElementById('map'), {
            center: currentDest,
            zoom: 8
        });


        // Create the places service.
        var service = new google.maps.places.PlacesService(map);
        var getNextPage = null;
        var moreButton = document.getElementById('more');
        moreButton.onclick = function () {
            moreButton.disabled = true;
            if (getNextPage) getNextPage();
        };


        var meterFromMileAround = Math.ceil( @Model.MilesAroundRoute / 0.00062137 );


        // Perform a nearby search.
        service.nearbySearch(
            { location: currentDest, radius: meterFromMileAround, type: ['@ViewBag.ChoosenSubCat'] },
            function (results, status, pagination) {
                if (status !== 'OK') return;

                createMarkers(results);
                moreButton.disabled = !pagination.hasNextPage;
                getNextPage = pagination.hasNextPage && function () {
                    pagination.nextPage();
                };
            });
    }




    function createMarkers(places) {
        var bounds = new google.maps.LatLngBounds();
        var placesList = document.getElementById('places');

        for (var i = 0, place; place = places[i]; i++) {
            var image = {
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(25, 25)
            };

            var marker = new google.maps.Marker({
                map: map,
                icon: image,
                title: place.name,
                position: place.geometry.location
            });

            
    
            var colDiv = document.createElement('div');
            colDiv.className = "col-md-4 my-3 text-center";

            var cardDiv = document.createElement('div');
            cardDiv.className = "card bg-primary text-white ";
             
            var cardBodyDiv = document.createElement('div');
            cardBodyDiv.className = "card-body";
            cardBodyDiv.textContent = place.vicinity;

            var cardTitle = document.createElement('h5');
            cardTitle.className = "card-title";
            cardTitle.textContent = place.name;
            


            placesList.appendChild(colDiv).appendChild(cardDiv).appendChild(cardBodyDiv).appendChild(cardTitle)


            bounds.extend(place.geometry.location);
        }
        map.fitBounds(bounds);
    }












</script>


<script src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.GoogleKey&libraries=places&callback=initMap" async defer></script>


